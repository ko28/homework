# Name: Daniel Ko
# Project 7, CS 540
# Email: ko28@wisc.edu
# Some comments were taken from the homework directly

import csv 
from scipy.cluster.hierarchy import linkage, dendrogram
import numpy as np
import copy 
from matplotlib import pyplot as plt

def load_data(filepath):
    data = []
    
    with open(filepath, newline='') as csvfile:
        reader = csv.DictReader(csvfile)
        for i, row in enumerate(reader):
            # first 20 Pokemon in this structure
            if i > 19:
                break
            entry = dict()
            for g in row:
                # dictionaries should not include the Generation and Legendary columns
                if g != 'Generation' and g != 'Legendary':
                     entry[g] = int(row[g]) if row[g].isdigit() else row[g]
            data.append(entry)

    return data

def calculate_x_y(stats):
    x = int(stats["Attack"]) +  int(stats["Sp. Atk"]) + int(stats["Speed"])
    y = int(stats["Defense"]) + int(stats["Sp. Def"]) + int(stats["HP"]) 
    return (x, y)

def compute_vector(data):
    vector = []
    for entry in data:
        vector.append(list(calculate_x_y(entry)))
    return vector

def hac_scipy(dataset):
    print(dataset)
    a = linkage(dataset, method='single')
    fig = plt.figure(figsize=(25, 10))
    dn = dendrogram(a)
    plt.savefig('help')
    return a


class Cluster:
    def __init__(self, points, index):
        self.points = points
        self.index = index
    
    def size(self):
        return len(self.points)


def hac(dataset):
    z = np.zeros((len(dataset) - 1, 4))
    
    clusters = []
    for i, data in enumerate(dataset):
        clusters.append(Cluster([data],i))
    
    next_index = len(clusters)
    i = 0 # keep track of which row to put data in matrix

    while len(clusters) > 1:
        min_dist = np.inf 
        min_cluster = []
        for cluster_a in clusters:
            for cluster_b in clusters:
                if cluster_a != cluster_b:
                    dist = calculate_min_dist(cluster_a, cluster_b)
                    if min_dist > dist:
                        min_dist = dist
                        min_cluster = [[cluster_a, cluster_b]]
                    elif dist == min_dist:
                        min_cluster.append([cluster_a, cluster_b])   
        #print(min_cluster)
        if len(clusters) == 1:
            min_cluster = min_cluster[0]
        else:
            temp_min = min_cluster[0]
            min_cluster.sort(key=lambda c: c[0].index)
            for c in min_cluster:
                if calculate_min_dist(c[0], c[1]) < calculate_min_dist(temp_min[0], temp_min[1]):
                    temp_min = c
            min_cluster = temp_min
            #min_cluster =  min(sorted(clusters, key=lambda c: c.index), key=lambda c: c.size())
        #print("after", min_cluster)
        #print(min_cluster[0].index,min_cluster[1].index )
        combined_cluster = Cluster(min_cluster[0].points + min_cluster[1].points, next_index)

        z[i, 0] = min_cluster[0].index
        z[i, 1] = min_cluster[1].index
        z[i, 2] = min_dist
        z[i, 3] = combined_cluster.size()

        next_index += 1
        i += 1 

        clusters.remove(min_cluster[0])
        clusters.remove(min_cluster[1])
        clusters.append(combined_cluster)

        
    return z

def calculate_min_dist(cluster_a, cluster_b):
    min = np.inf
    for point_a in cluster_a.points:
        for point_b in cluster_b.points:
            temp_dist = np.linalg.norm(np.array(point_a) - np.array(point_b))
            if min > temp_dist:
                min = temp_dist

    return min

def hac_old(dataset):
    z = np.zeros((len(dataset) - 1, 4))
    
    clusters = []
    for i, data in enumerate(dataset):
        clusters.append([data, i, 1])

    next_index = len(clusters)
    i=0
    while len(clusters) > 1:
        min_dist = np.inf 
        min_cluster = None
        for val_a in clusters:
            for val_b in clusters:
                if val_a != val_b:
                    dist = np.linalg.norm(np.array(val_a[0]) - np.array(val_b[0]))
                    if dist < min_dist:
                        print(np.array(val_a[0]), np.array(val_b[0]))
                        min_dist = dist
                        min_cluster = [[val_a, val_b]]
                    elif dist == min_dist:
                        min_cluster.append([val_a, val_b])
        
        #print(min_cluster)
        if len(min_cluster) == 1:
            min_cluster = min_cluster[0]
        else:
            print("woah", len(min_cluster))
            min = min_cluster[0]
            for cluster in min_cluster:
                if cluster[0][2] + cluster[1][2] < min[0][2] + min[1][2]:
                    min = cluster
            min_cluster = min
        print("we have our min boi", min_cluster)
        z[i, 0] = min_cluster[0][1]
        z[i, 1] = min_cluster[1][1]
        z[i, 2] = min_dist
        z[i, 3] = min_cluster[0][2] + min_cluster[1][2]
        
        new_x = (min_cluster[0][0][0] + min_cluster[1][0][0])/2
        new_y = (min_cluster[0][0][1] + min_cluster[1][0][1])/2
        #print(min_cluster[0][0], min_cluster[1][0])
        #print(new_x, new_y)
        new_cluster = [[new_x, new_y], next_index, min_cluster[0][2] + min_cluster[1][2]]
        
        i+=1
        next_index+=1
        
        clusters.remove(min_cluster[0])
        clusters.remove(min_cluster[1])
        clusters.append(new_cluster)
        print("we added this boi", new_cluster)
        print(clusters)
        print(z)
        print()
    return z



if __name__=="__main__":
    #data = load_data('Pokemon.csv')
    #xy = compute_vector(data)
    #print(xy)
    #print(hac(xy))
    #me = hac_1(xy)
    #print(me)
    #fig = plt.figure(figsize=(25, 10))
    #dn = dendrogram(me)
    #plt.savefig('help2')
    #print(hac_scipy(xy))
    #print(xy[1])
    #print(me)
    pass