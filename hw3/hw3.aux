\relax 
\providecommand\hyper@newdestlabel[2]{}
\providecommand\zref@newlabel[2]{}
\providecommand*\new@tpo@label[2]{}
\providecommand\HyperFirstAtBeginDocument{\AtBeginDocument}
\HyperFirstAtBeginDocument{\ifx\hyper@anchor\@undefined
\global\let\oldcontentsline\contentsline
\gdef\contentsline#1#2#3#4{\oldcontentsline{#1}{#2}{#3}}
\global\let\oldnewlabel\newlabel
\gdef\newlabel#1#2{\newlabelxx{#1}#2}
\gdef\newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\ifx\hyper@anchor\@undefined
\let\contentsline\oldcontentsline
\let\newlabel\oldnewlabel
\fi}
\fi}
\global\let\hyper@last\relax 
\gdef\HyperFirstAtBeginDocument#1{#1}
\providecommand\HyField@AuxAddToFields[1]{}
\providecommand\HyField@AuxAddToCoFields[2]{}
\providecommand*\tocstyle@set@width[4]{}
\providecommand \oddpage@label [2]{}
\@writefile{toc}{\contentsline {section}{\numberline {1}Kleinberg Chapter 6, Q14}{1}{section.1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.1}Suppose it is possible to choose a single path $P$ that is an $s-t$ path in each of the graphs $G_0, G_1, \cdots  , G_b$. Give a polynomial-time algorithm to find the shortest such path.}{1}{subsection.1.1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.2}Give a polynomial-time algorithm to find a sequence of paths $P_0, P_1, \cdots  , P_b$ of minimum cost, where $P_i$ is an $s-t$ path in $G_i$ for $i = 0, 1, \cdots  , b$.}{1}{subsection.1.2}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.2.1}Set up the recursive formula and justify its correctness.}{1}{subsubsection.1.2.1}}
\@writefile{toc}{\contentsline {section}{\numberline {2}Given a rooted tree $T = (V, E)$ and an integer $k$, find the largest possible number of disjoint paths in $T$, where each path has length $k$.}{2}{section.2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1}Set up the recursive formula and justify its correctness.}{2}{subsection.2.1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2}Write the pseudocode for the iterative version of the algorithm to find the maximum number of players that can play at the same time.}{3}{subsection.2.2}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.2.1}Analyze the computing complexity.}{3}{subsubsection.2.2.1}}
