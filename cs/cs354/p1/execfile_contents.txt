
decode:     file format elf32-i386


Disassembly of section .init:

00001000 <_init>:
    1000:	f3 0f 1e fb          	endbr32 
    1004:	53                   	push   %ebx
    1005:	83 ec 08             	sub    $0x8,%esp
    1008:	e8 83 01 00 00       	call   1190 <__x86.get_pc_thunk.bx>
    100d:	81 c3 ab 2f 00 00    	add    $0x2fab,%ebx
    1013:	8b 83 38 00 00 00    	mov    0x38(%ebx),%eax
    1019:	85 c0                	test   %eax,%eax
    101b:	74 02                	je     101f <_init+0x1f>
    101d:	ff d0                	call   *%eax
    101f:	83 c4 08             	add    $0x8,%esp
    1022:	5b                   	pop    %ebx
    1023:	c3                   	ret    

Disassembly of section .plt:

00001030 <.plt>:
    1030:	ff b3 04 00 00 00    	pushl  0x4(%ebx)
    1036:	ff a3 08 00 00 00    	jmp    *0x8(%ebx)
    103c:	0f 1f 40 00          	nopl   0x0(%eax)
    1040:	f3 0f 1e fb          	endbr32 
    1044:	68 00 00 00 00       	push   $0x0
    1049:	e9 e2 ff ff ff       	jmp    1030 <.plt>
    104e:	66 90                	xchg   %ax,%ax
    1050:	f3 0f 1e fb          	endbr32 
    1054:	68 08 00 00 00       	push   $0x8
    1059:	e9 d2 ff ff ff       	jmp    1030 <.plt>
    105e:	66 90                	xchg   %ax,%ax
    1060:	f3 0f 1e fb          	endbr32 
    1064:	68 10 00 00 00       	push   $0x10
    1069:	e9 c2 ff ff ff       	jmp    1030 <.plt>
    106e:	66 90                	xchg   %ax,%ax
    1070:	f3 0f 1e fb          	endbr32 
    1074:	68 18 00 00 00       	push   $0x18
    1079:	e9 b2 ff ff ff       	jmp    1030 <.plt>
    107e:	66 90                	xchg   %ax,%ax
    1080:	f3 0f 1e fb          	endbr32 
    1084:	68 20 00 00 00       	push   $0x20
    1089:	e9 a2 ff ff ff       	jmp    1030 <.plt>
    108e:	66 90                	xchg   %ax,%ax
    1090:	f3 0f 1e fb          	endbr32 
    1094:	68 28 00 00 00       	push   $0x28
    1099:	e9 92 ff ff ff       	jmp    1030 <.plt>
    109e:	66 90                	xchg   %ax,%ax
    10a0:	f3 0f 1e fb          	endbr32 
    10a4:	68 30 00 00 00       	push   $0x30
    10a9:	e9 82 ff ff ff       	jmp    1030 <.plt>
    10ae:	66 90                	xchg   %ax,%ax
    10b0:	f3 0f 1e fb          	endbr32 
    10b4:	68 38 00 00 00       	push   $0x38
    10b9:	e9 72 ff ff ff       	jmp    1030 <.plt>
    10be:	66 90                	xchg   %ax,%ax

Disassembly of section .plt.got:

000010c0 <__cxa_finalize@plt>:
    10c0:	f3 0f 1e fb          	endbr32 
    10c4:	ff a3 34 00 00 00    	jmp    *0x34(%ebx)
    10ca:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

Disassembly of section .plt.sec:

000010d0 <printf@plt>:
    10d0:	f3 0f 1e fb          	endbr32 
    10d4:	ff a3 0c 00 00 00    	jmp    *0xc(%ebx)
    10da:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

000010e0 <fgets@plt>:
    10e0:	f3 0f 1e fb          	endbr32 
    10e4:	ff a3 10 00 00 00    	jmp    *0x10(%ebx)
    10ea:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

000010f0 <fwrite@plt>:
    10f0:	f3 0f 1e fb          	endbr32 
    10f4:	ff a3 14 00 00 00    	jmp    *0x14(%ebx)
    10fa:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00001100 <malloc@plt>:
    1100:	f3 0f 1e fb          	endbr32 
    1104:	ff a3 18 00 00 00    	jmp    *0x18(%ebx)
    110a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00001110 <exit@plt>:
    1110:	f3 0f 1e fb          	endbr32 
    1114:	ff a3 1c 00 00 00    	jmp    *0x1c(%ebx)
    111a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00001120 <strlen@plt>:
    1120:	f3 0f 1e fb          	endbr32 
    1124:	ff a3 20 00 00 00    	jmp    *0x20(%ebx)
    112a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00001130 <__libc_start_main@plt>:
    1130:	f3 0f 1e fb          	endbr32 
    1134:	ff a3 24 00 00 00    	jmp    *0x24(%ebx)
    113a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00001140 <fopen@plt>:
    1140:	f3 0f 1e fb          	endbr32 
    1144:	ff a3 28 00 00 00    	jmp    *0x28(%ebx)
    114a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

Disassembly of section .text:

00001150 <_start>:
    1150:	f3 0f 1e fb          	endbr32 
    1154:	31 ed                	xor    %ebp,%ebp
    1156:	5e                   	pop    %esi
    1157:	89 e1                	mov    %esp,%ecx
    1159:	83 e4 f0             	and    $0xfffffff0,%esp
    115c:	50                   	push   %eax
    115d:	54                   	push   %esp
    115e:	52                   	push   %edx
    115f:	e8 22 00 00 00       	call   1186 <_start+0x36>
    1164:	81 c3 54 2e 00 00    	add    $0x2e54,%ebx
    116a:	8d 83 88 d6 ff ff    	lea    -0x2978(%ebx),%eax
    1170:	50                   	push   %eax
    1171:	8d 83 18 d6 ff ff    	lea    -0x29e8(%ebx),%eax
    1177:	50                   	push   %eax
    1178:	51                   	push   %ecx
    1179:	56                   	push   %esi
    117a:	ff b3 40 00 00 00    	pushl  0x40(%ebx)
    1180:	e8 ab ff ff ff       	call   1130 <__libc_start_main@plt>
    1185:	f4                   	hlt    
    1186:	8b 1c 24             	mov    (%esp),%ebx
    1189:	c3                   	ret    
    118a:	66 90                	xchg   %ax,%ax
    118c:	66 90                	xchg   %ax,%ax
    118e:	66 90                	xchg   %ax,%ax

00001190 <__x86.get_pc_thunk.bx>:
    1190:	8b 1c 24             	mov    (%esp),%ebx
    1193:	c3                   	ret    
    1194:	66 90                	xchg   %ax,%ax
    1196:	66 90                	xchg   %ax,%ax
    1198:	66 90                	xchg   %ax,%ax
    119a:	66 90                	xchg   %ax,%ax
    119c:	66 90                	xchg   %ax,%ax
    119e:	66 90                	xchg   %ax,%ax

000011a0 <deregister_tm_clones>:
    11a0:	e8 e4 00 00 00       	call   1289 <__x86.get_pc_thunk.dx>
    11a5:	81 c2 13 2e 00 00    	add    $0x2e13,%edx
    11ab:	8d 8a 50 00 00 00    	lea    0x50(%edx),%ecx
    11b1:	8d 82 50 00 00 00    	lea    0x50(%edx),%eax
    11b7:	39 c8                	cmp    %ecx,%eax
    11b9:	74 1d                	je     11d8 <deregister_tm_clones+0x38>
    11bb:	8b 82 2c 00 00 00    	mov    0x2c(%edx),%eax
    11c1:	85 c0                	test   %eax,%eax
    11c3:	74 13                	je     11d8 <deregister_tm_clones+0x38>
    11c5:	55                   	push   %ebp
    11c6:	89 e5                	mov    %esp,%ebp
    11c8:	83 ec 14             	sub    $0x14,%esp
    11cb:	51                   	push   %ecx
    11cc:	ff d0                	call   *%eax
    11ce:	83 c4 10             	add    $0x10,%esp
    11d1:	c9                   	leave  
    11d2:	c3                   	ret    
    11d3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    11d7:	90                   	nop
    11d8:	c3                   	ret    
    11d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

000011e0 <register_tm_clones>:
    11e0:	e8 a4 00 00 00       	call   1289 <__x86.get_pc_thunk.dx>
    11e5:	81 c2 d3 2d 00 00    	add    $0x2dd3,%edx
    11eb:	55                   	push   %ebp
    11ec:	89 e5                	mov    %esp,%ebp
    11ee:	53                   	push   %ebx
    11ef:	8d 8a 50 00 00 00    	lea    0x50(%edx),%ecx
    11f5:	8d 82 50 00 00 00    	lea    0x50(%edx),%eax
    11fb:	83 ec 04             	sub    $0x4,%esp
    11fe:	29 c8                	sub    %ecx,%eax
    1200:	89 c3                	mov    %eax,%ebx
    1202:	c1 e8 1f             	shr    $0x1f,%eax
    1205:	c1 fb 02             	sar    $0x2,%ebx
    1208:	01 d8                	add    %ebx,%eax
    120a:	d1 f8                	sar    %eax
    120c:	74 14                	je     1222 <register_tm_clones+0x42>
    120e:	8b 92 44 00 00 00    	mov    0x44(%edx),%edx
    1214:	85 d2                	test   %edx,%edx
    1216:	74 0a                	je     1222 <register_tm_clones+0x42>
    1218:	83 ec 08             	sub    $0x8,%esp
    121b:	50                   	push   %eax
    121c:	51                   	push   %ecx
    121d:	ff d2                	call   *%edx
    121f:	83 c4 10             	add    $0x10,%esp
    1222:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    1225:	c9                   	leave  
    1226:	c3                   	ret    
    1227:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    122e:	66 90                	xchg   %ax,%ax

00001230 <__do_global_dtors_aux>:
    1230:	f3 0f 1e fb          	endbr32 
    1234:	55                   	push   %ebp
    1235:	89 e5                	mov    %esp,%ebp
    1237:	53                   	push   %ebx
    1238:	e8 53 ff ff ff       	call   1190 <__x86.get_pc_thunk.bx>
    123d:	81 c3 7b 2d 00 00    	add    $0x2d7b,%ebx
    1243:	83 ec 04             	sub    $0x4,%esp
    1246:	80 bb 50 00 00 00 00 	cmpb   $0x0,0x50(%ebx)
    124d:	75 27                	jne    1276 <__do_global_dtors_aux+0x46>
    124f:	8b 83 34 00 00 00    	mov    0x34(%ebx),%eax
    1255:	85 c0                	test   %eax,%eax
    1257:	74 11                	je     126a <__do_global_dtors_aux+0x3a>
    1259:	83 ec 0c             	sub    $0xc,%esp
    125c:	ff b3 4c 00 00 00    	pushl  0x4c(%ebx)
    1262:	e8 59 fe ff ff       	call   10c0 <__cxa_finalize@plt>
    1267:	83 c4 10             	add    $0x10,%esp
    126a:	e8 31 ff ff ff       	call   11a0 <deregister_tm_clones>
    126f:	c6 83 50 00 00 00 01 	movb   $0x1,0x50(%ebx)
    1276:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    1279:	c9                   	leave  
    127a:	c3                   	ret    
    127b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    127f:	90                   	nop

00001280 <frame_dummy>:
    1280:	f3 0f 1e fb          	endbr32 
    1284:	e9 57 ff ff ff       	jmp    11e0 <register_tm_clones>

00001289 <__x86.get_pc_thunk.dx>:
    1289:	8b 14 24             	mov    (%esp),%edx
    128c:	c3                   	ret    

0000128d <main>:
    128d:	f3 0f 1e fb          	endbr32 
    1291:	8d 4c 24 04          	lea    0x4(%esp),%ecx
    1295:	83 e4 f0             	and    $0xfffffff0,%esp
    1298:	ff 71 fc             	pushl  -0x4(%ecx)
    129b:	55                   	push   %ebp
    129c:	89 e5                	mov    %esp,%ebp
    129e:	53                   	push   %ebx
    129f:	51                   	push   %ecx
    12a0:	83 ec 10             	sub    $0x10,%esp
    12a3:	e8 e8 fe ff ff       	call   1190 <__x86.get_pc_thunk.bx>
    12a8:	81 c3 10 2d 00 00    	add    $0x2d10,%ebx
    12ae:	e8 58 00 00 00       	call   130b <read_cipher_file>
    12b3:	89 45 ec             	mov    %eax,-0x14(%ebp)
    12b6:	83 ec 08             	sub    $0x8,%esp
    12b9:	ff 75 ec             	pushl  -0x14(%ebp)
    12bc:	8d 83 50 e0 ff ff    	lea    -0x1fb0(%ebx),%eax
    12c2:	50                   	push   %eax
    12c3:	e8 08 fe ff ff       	call   10d0 <printf@plt>
    12c8:	83 c4 10             	add    $0x10,%esp
    12cb:	e8 25 01 00 00       	call   13f5 <get_login_key>
    12d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    12d3:	83 ec 08             	sub    $0x8,%esp
    12d6:	ff 75 f0             	pushl  -0x10(%ebp)
    12d9:	ff 75 ec             	pushl  -0x14(%ebp)
    12dc:	e8 c8 01 00 00       	call   14a9 <decode>
    12e1:	83 c4 10             	add    $0x10,%esp
    12e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    12e7:	83 ec 08             	sub    $0x8,%esp
    12ea:	ff 75 f4             	pushl  -0xc(%ebp)
    12ed:	8d 83 61 e0 ff ff    	lea    -0x1f9f(%ebx),%eax
    12f3:	50                   	push   %eax
    12f4:	e8 d7 fd ff ff       	call   10d0 <printf@plt>
    12f9:	83 c4 10             	add    $0x10,%esp
    12fc:	b8 00 00 00 00       	mov    $0x0,%eax
    1301:	8d 65 f8             	lea    -0x8(%ebp),%esp
    1304:	59                   	pop    %ecx
    1305:	5b                   	pop    %ebx
    1306:	5d                   	pop    %ebp
    1307:	8d 61 fc             	lea    -0x4(%ecx),%esp
    130a:	c3                   	ret    

0000130b <read_cipher_file>:
    130b:	f3 0f 1e fb          	endbr32 
    130f:	55                   	push   %ebp
    1310:	89 e5                	mov    %esp,%ebp
    1312:	53                   	push   %ebx
    1313:	83 ec 14             	sub    $0x14,%esp
    1316:	e8 75 fe ff ff       	call   1190 <__x86.get_pc_thunk.bx>
    131b:	81 c3 9d 2c 00 00    	add    $0x2c9d,%ebx
    1321:	83 ec 08             	sub    $0x8,%esp
    1324:	8d 83 70 e0 ff ff    	lea    -0x1f90(%ebx),%eax
    132a:	50                   	push   %eax
    132b:	8d 83 72 e0 ff ff    	lea    -0x1f8e(%ebx),%eax
    1331:	50                   	push   %eax
    1332:	e8 09 fe ff ff       	call   1140 <fopen@plt>
    1337:	83 c4 10             	add    $0x10,%esp
    133a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    133d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
    1341:	75 26                	jne    1369 <read_cipher_file+0x5e>
    1343:	8b 83 30 00 00 00    	mov    0x30(%ebx),%eax
    1349:	8b 00                	mov    (%eax),%eax
    134b:	50                   	push   %eax
    134c:	6a 1e                	push   $0x1e
    134e:	6a 01                	push   $0x1
    1350:	8d 83 80 e0 ff ff    	lea    -0x1f80(%ebx),%eax
    1356:	50                   	push   %eax
    1357:	e8 94 fd ff ff       	call   10f0 <fwrite@plt>
    135c:	83 c4 10             	add    $0x10,%esp
    135f:	83 ec 0c             	sub    $0xc,%esp
    1362:	6a 01                	push   $0x1
    1364:	e8 a7 fd ff ff       	call   1110 <exit@plt>
    1369:	83 ec 0c             	sub    $0xc,%esp
    136c:	68 e8 03 00 00       	push   $0x3e8
    1371:	e8 8a fd ff ff       	call   1100 <malloc@plt>
    1376:	83 c4 10             	add    $0x10,%esp
    1379:	89 45 f0             	mov    %eax,-0x10(%ebp)
    137c:	83 ec 04             	sub    $0x4,%esp
    137f:	ff 75 ec             	pushl  -0x14(%ebp)
    1382:	68 e8 03 00 00       	push   $0x3e8
    1387:	ff 75 f0             	pushl  -0x10(%ebp)
    138a:	e8 51 fd ff ff       	call   10e0 <fgets@plt>
    138f:	83 c4 10             	add    $0x10,%esp
    1392:	85 c0                	test   %eax,%eax
    1394:	75 26                	jne    13bc <read_cipher_file+0xb1>
    1396:	8b 83 30 00 00 00    	mov    0x30(%ebx),%eax
    139c:	8b 00                	mov    (%eax),%eax
    139e:	50                   	push   %eax
    139f:	6a 20                	push   $0x20
    13a1:	6a 01                	push   $0x1
    13a3:	8d 83 a0 e0 ff ff    	lea    -0x1f60(%ebx),%eax
    13a9:	50                   	push   %eax
    13aa:	e8 41 fd ff ff       	call   10f0 <fwrite@plt>
    13af:	83 c4 10             	add    $0x10,%esp
    13b2:	83 ec 0c             	sub    $0xc,%esp
    13b5:	6a 01                	push   $0x1
    13b7:	e8 54 fd ff ff       	call   1110 <exit@plt>
    13bc:	83 ec 0c             	sub    $0xc,%esp
    13bf:	ff 75 f0             	pushl  -0x10(%ebp)
    13c2:	e8 59 fd ff ff       	call   1120 <strlen@plt>
    13c7:	83 c4 10             	add    $0x10,%esp
    13ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
    13cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
    13d0:	8d 50 ff             	lea    -0x1(%eax),%edx
    13d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
    13d6:	01 d0                	add    %edx,%eax
    13d8:	0f b6 00             	movzbl (%eax),%eax
    13db:	3c 0a                	cmp    $0xa,%al
    13dd:	75 0e                	jne    13ed <read_cipher_file+0xe2>
    13df:	8b 45 f4             	mov    -0xc(%ebp),%eax
    13e2:	8d 50 ff             	lea    -0x1(%eax),%edx
    13e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
    13e8:	01 d0                	add    %edx,%eax
    13ea:	c6 00 00             	movb   $0x0,(%eax)
    13ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
    13f0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    13f3:	c9                   	leave  
    13f4:	c3                   	ret    

000013f5 <get_login_key>:
    13f5:	f3 0f 1e fb          	endbr32 
    13f9:	55                   	push   %ebp
    13fa:	89 e5                	mov    %esp,%ebp
    13fc:	53                   	push   %ebx
    13fd:	83 ec 14             	sub    $0x14,%esp
    1400:	e8 8b fd ff ff       	call   1190 <__x86.get_pc_thunk.bx>
    1405:	81 c3 b3 2b 00 00    	add    $0x2bb3,%ebx
    140b:	83 ec 0c             	sub    $0xc,%esp
    140e:	6a 32                	push   $0x32
    1410:	e8 eb fc ff ff       	call   1100 <malloc@plt>
    1415:	83 c4 10             	add    $0x10,%esp
    1418:	89 45 f0             	mov    %eax,-0x10(%ebp)
    141b:	83 ec 0c             	sub    $0xc,%esp
    141e:	8d 83 c1 e0 ff ff    	lea    -0x1f3f(%ebx),%eax
    1424:	50                   	push   %eax
    1425:	e8 a6 fc ff ff       	call   10d0 <printf@plt>
    142a:	83 c4 10             	add    $0x10,%esp
    142d:	8b 83 3c 00 00 00    	mov    0x3c(%ebx),%eax
    1433:	8b 00                	mov    (%eax),%eax
    1435:	83 ec 04             	sub    $0x4,%esp
    1438:	50                   	push   %eax
    1439:	6a 32                	push   $0x32
    143b:	ff 75 f0             	pushl  -0x10(%ebp)
    143e:	e8 9d fc ff ff       	call   10e0 <fgets@plt>
    1443:	83 c4 10             	add    $0x10,%esp
    1446:	85 c0                	test   %eax,%eax
    1448:	75 26                	jne    1470 <get_login_key+0x7b>
    144a:	8b 83 30 00 00 00    	mov    0x30(%ebx),%eax
    1450:	8b 00                	mov    (%eax),%eax
    1452:	50                   	push   %eax
    1453:	6a 1a                	push   $0x1a
    1455:	6a 01                	push   $0x1
    1457:	8d 83 d7 e0 ff ff    	lea    -0x1f29(%ebx),%eax
    145d:	50                   	push   %eax
    145e:	e8 8d fc ff ff       	call   10f0 <fwrite@plt>
    1463:	83 c4 10             	add    $0x10,%esp
    1466:	83 ec 0c             	sub    $0xc,%esp
    1469:	6a 01                	push   $0x1
    146b:	e8 a0 fc ff ff       	call   1110 <exit@plt>
    1470:	83 ec 0c             	sub    $0xc,%esp
    1473:	ff 75 f0             	pushl  -0x10(%ebp)
    1476:	e8 a5 fc ff ff       	call   1120 <strlen@plt>
    147b:	83 c4 10             	add    $0x10,%esp
    147e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    1481:	8b 45 f4             	mov    -0xc(%ebp),%eax
    1484:	8d 50 ff             	lea    -0x1(%eax),%edx
    1487:	8b 45 f0             	mov    -0x10(%ebp),%eax
    148a:	01 d0                	add    %edx,%eax
    148c:	0f b6 00             	movzbl (%eax),%eax
    148f:	3c 0a                	cmp    $0xa,%al
    1491:	75 0e                	jne    14a1 <get_login_key+0xac>
    1493:	8b 45 f4             	mov    -0xc(%ebp),%eax
    1496:	8d 50 ff             	lea    -0x1(%eax),%edx
    1499:	8b 45 f0             	mov    -0x10(%ebp),%eax
    149c:	01 d0                	add    %edx,%eax
    149e:	c6 00 00             	movb   $0x0,(%eax)
    14a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
    14a4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    14a7:	c9                   	leave  
    14a8:	c3                   	ret    

000014a9 <decode>:
    14a9:	f3 0f 1e fb          	endbr32 
    14ad:	55                   	push   %ebp
    14ae:	89 e5                	mov    %esp,%ebp
    14b0:	83 ec 18             	sub    $0x18,%esp
    14b3:	e8 09 01 00 00       	call   15c1 <__x86.get_pc_thunk.ax>
    14b8:	05 00 2b 00 00       	add    $0x2b00,%eax
    14bd:	83 ec 0c             	sub    $0xc,%esp
    14c0:	ff 75 0c             	pushl  0xc(%ebp)
    14c3:	e8 82 00 00 00       	call   154a <calculate_shifts>
    14c8:	83 c4 10             	add    $0x10,%esp
    14cb:	89 45 ec             	mov    %eax,-0x14(%ebp)
    14ce:	8b 45 08             	mov    0x8(%ebp),%eax
    14d1:	89 45 e8             	mov    %eax,-0x18(%ebp)
    14d4:	eb 65                	jmp    153b <decode+0x92>
    14d6:	8b 45 e8             	mov    -0x18(%ebp),%eax
    14d9:	0f b6 00             	movzbl (%eax),%eax
    14dc:	3c 60                	cmp    $0x60,%al
    14de:	7e 56                	jle    1536 <decode+0x8d>
    14e0:	8b 45 e8             	mov    -0x18(%ebp),%eax
    14e3:	0f b6 00             	movzbl (%eax),%eax
    14e6:	3c 7a                	cmp    $0x7a,%al
    14e8:	7f 4c                	jg     1536 <decode+0x8d>
    14ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
    14ed:	0f b6 00             	movzbl (%eax),%eax
    14f0:	0f be c0             	movsbl %al,%eax
    14f3:	83 e8 61             	sub    $0x61,%eax
    14f6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    14f9:	8b 55 f0             	mov    -0x10(%ebp),%edx
    14fc:	8b 45 ec             	mov    -0x14(%ebp),%eax
    14ff:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
    1502:	ba 4f ec c4 4e       	mov    $0x4ec4ec4f,%edx
    1507:	89 c8                	mov    %ecx,%eax
    1509:	f7 ea                	imul   %edx
    150b:	c1 fa 03             	sar    $0x3,%edx
    150e:	89 c8                	mov    %ecx,%eax
    1510:	c1 f8 1f             	sar    $0x1f,%eax
    1513:	29 c2                	sub    %eax,%edx
    1515:	89 d0                	mov    %edx,%eax
    1517:	89 45 f4             	mov    %eax,-0xc(%ebp)
    151a:	8b 45 f4             	mov    -0xc(%ebp),%eax
    151d:	6b c0 1a             	imul   $0x1a,%eax,%eax
    1520:	29 c1                	sub    %eax,%ecx
    1522:	89 c8                	mov    %ecx,%eax
    1524:	89 45 f4             	mov    %eax,-0xc(%ebp)
    1527:	8b 45 f4             	mov    -0xc(%ebp),%eax
    152a:	83 c0 61             	add    $0x61,%eax
    152d:	89 c2                	mov    %eax,%edx
    152f:	8b 45 e8             	mov    -0x18(%ebp),%eax
    1532:	88 10                	mov    %dl,(%eax)
    1534:	eb 01                	jmp    1537 <decode+0x8e>
    1536:	90                   	nop
    1537:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
    153b:	8b 45 e8             	mov    -0x18(%ebp),%eax
    153e:	0f b6 00             	movzbl (%eax),%eax
    1541:	84 c0                	test   %al,%al
    1543:	75 91                	jne    14d6 <decode+0x2d>
    1545:	8b 45 08             	mov    0x8(%ebp),%eax
    1548:	c9                   	leave  
    1549:	c3                   	ret    

0000154a <calculate_shifts>:
    154a:	f3 0f 1e fb          	endbr32 
    154e:	55                   	push   %ebp
    154f:	89 e5                	mov    %esp,%ebp
    1551:	83 ec 10             	sub    $0x10,%esp
    1554:	e8 68 00 00 00       	call   15c1 <__x86.get_pc_thunk.ax>
    1559:	05 5f 2a 00 00       	add    $0x2a5f,%eax
    155e:	8b 45 08             	mov    0x8(%ebp),%eax
    1561:	89 45 f8             	mov    %eax,-0x8(%ebp)
    1564:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    156b:	eb 10                	jmp    157d <calculate_shifts+0x33>
    156d:	8b 45 f8             	mov    -0x8(%ebp),%eax
    1570:	0f b6 00             	movzbl (%eax),%eax
    1573:	0f be c0             	movsbl %al,%eax
    1576:	31 45 fc             	xor    %eax,-0x4(%ebp)
    1579:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    157d:	8b 45 f8             	mov    -0x8(%ebp),%eax
    1580:	0f b6 00             	movzbl (%eax),%eax
    1583:	84 c0                	test   %al,%al
    1585:	75 e6                	jne    156d <calculate_shifts+0x23>
    1587:	8b 4d fc             	mov    -0x4(%ebp),%ecx
    158a:	ba 4f ec c4 4e       	mov    $0x4ec4ec4f,%edx
    158f:	89 c8                	mov    %ecx,%eax
    1591:	f7 ea                	imul   %edx
    1593:	c1 fa 03             	sar    $0x3,%edx
    1596:	89 c8                	mov    %ecx,%eax
    1598:	c1 f8 1f             	sar    $0x1f,%eax
    159b:	29 c2                	sub    %eax,%edx
    159d:	89 d0                	mov    %edx,%eax
    159f:	6b c0 1a             	imul   $0x1a,%eax,%eax
    15a2:	29 c1                	sub    %eax,%ecx
    15a4:	89 c8                	mov    %ecx,%eax
    15a6:	99                   	cltd   
    15a7:	31 d0                	xor    %edx,%eax
    15a9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    15ac:	29 55 fc             	sub    %edx,-0x4(%ebp)
    15af:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
    15b3:	75 07                	jne    15bc <calculate_shifts+0x72>
    15b5:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    15bc:	8b 45 fc             	mov    -0x4(%ebp),%eax
    15bf:	c9                   	leave  
    15c0:	c3                   	ret    

000015c1 <__x86.get_pc_thunk.ax>:
    15c1:	8b 04 24             	mov    (%esp),%eax
    15c4:	c3                   	ret    
    15c5:	66 90                	xchg   %ax,%ax
    15c7:	66 90                	xchg   %ax,%ax
    15c9:	66 90                	xchg   %ax,%ax
    15cb:	66 90                	xchg   %ax,%ax
    15cd:	66 90                	xchg   %ax,%ax
    15cf:	90                   	nop

000015d0 <__libc_csu_init>:
    15d0:	f3 0f 1e fb          	endbr32 
    15d4:	55                   	push   %ebp
    15d5:	e8 6b 00 00 00       	call   1645 <__x86.get_pc_thunk.bp>
    15da:	81 c5 de 29 00 00    	add    $0x29de,%ebp
    15e0:	57                   	push   %edi
    15e1:	56                   	push   %esi
    15e2:	53                   	push   %ebx
    15e3:	83 ec 0c             	sub    $0xc,%esp
    15e6:	89 eb                	mov    %ebp,%ebx
    15e8:	8b 7c 24 28          	mov    0x28(%esp),%edi
    15ec:	e8 0f fa ff ff       	call   1000 <_init>
    15f1:	8d 9d 04 ff ff ff    	lea    -0xfc(%ebp),%ebx
    15f7:	8d 85 00 ff ff ff    	lea    -0x100(%ebp),%eax
    15fd:	29 c3                	sub    %eax,%ebx
    15ff:	c1 fb 02             	sar    $0x2,%ebx
    1602:	74 29                	je     162d <__libc_csu_init+0x5d>
    1604:	31 f6                	xor    %esi,%esi
    1606:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    160d:	8d 76 00             	lea    0x0(%esi),%esi
    1610:	83 ec 04             	sub    $0x4,%esp
    1613:	57                   	push   %edi
    1614:	ff 74 24 2c          	pushl  0x2c(%esp)
    1618:	ff 74 24 2c          	pushl  0x2c(%esp)
    161c:	ff 94 b5 00 ff ff ff 	call   *-0x100(%ebp,%esi,4)
    1623:	83 c6 01             	add    $0x1,%esi
    1626:	83 c4 10             	add    $0x10,%esp
    1629:	39 f3                	cmp    %esi,%ebx
    162b:	75 e3                	jne    1610 <__libc_csu_init+0x40>
    162d:	83 c4 0c             	add    $0xc,%esp
    1630:	5b                   	pop    %ebx
    1631:	5e                   	pop    %esi
    1632:	5f                   	pop    %edi
    1633:	5d                   	pop    %ebp
    1634:	c3                   	ret    
    1635:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    163c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

00001640 <__libc_csu_fini>:
    1640:	f3 0f 1e fb          	endbr32 
    1644:	c3                   	ret    

00001645 <__x86.get_pc_thunk.bp>:
    1645:	8b 2c 24             	mov    (%esp),%ebp
    1648:	c3                   	ret    

Disassembly of section .fini:

0000164c <_fini>:
    164c:	f3 0f 1e fb          	endbr32 
    1650:	53                   	push   %ebx
    1651:	83 ec 08             	sub    $0x8,%esp
    1654:	e8 37 fb ff ff       	call   1190 <__x86.get_pc_thunk.bx>
    1659:	81 c3 5f 29 00 00    	add    $0x295f,%ebx
    165f:	83 c4 08             	add    $0x8,%esp
    1662:	5b                   	pop    %ebx
    1663:	c3                   	ret    
